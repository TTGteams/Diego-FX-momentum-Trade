services:
  trading_system:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: forex_trading_system
    ports:
      - "5000:5000"  # Flask server
      - "5001:5001"  # IB bot HTTP API
    environment:
      # Flask configuration
      FLASK_ENV: production
      PYTHONUNBUFFERED: 1
      PYTHONPATH: /app

      #########################################
      # Algorithm instance ID and trading configuration
      # Instance 1: Live trading capable (default)
      # Instance 2, 3, etc.: Paper trading only
      ALGO_INSTANCE: "1"
      
      # Trading mode configuration
      # For Instance 1: Can be "live" or "paper"
      # For Instance 2+: Must be "paper" (enforced by code)
      TRADING_MODE: "live"  # or "paper"
      
      # Sub-account configuration (for live trading)
      # Only used when TRADING_MODE=live and ALGO_INSTANCE=1
      # This connects to sub-account U12923979 within the live trading account
      ACCOUNT_ID: "U12923979"
      
      # Position size configuration
      # Default: 10k for live trading, 100k for paper trading
      # Can be overridden with SET_ORDER_SIZE command
      POSITION_SIZE: "10000"  # Set to 10k for live, 100k for paper
      #########################################
      
      # Database configuration (can be overridden via env file)
      DB_SERVER: "192.168.50.100"
      DB_DATABASE: "FXStrat"
      DB_USERNAME: "djaime"
      DB_PASSWORD: "Enrique30072000!3"
      
      # Interactive Brokers configuration
      IB_HOST: "host.docker.internal"  # Special Docker hostname to reach host machine
      IB_PORT: "7496"  # 7496 for live, 7497 for paper (auto-configured by instance)
      IB_CLIENT_ID: "6969"
      IB_API_PORT: "5001"  # HTTP API port for IB bot
      
      # API configuration
      API_URL: "http://localhost:5000/trade_signal"
      
      # Accept EULA for SQL Server components
      ACCEPT_EULA: Y
      
    volumes:
      # Mount logs directory for persistent logging
      - ./logs:/app/logs
      
      # Mount the application code for development (remove in production)
      - .:/app
      
      # Mount a persistent data directory for any cached data
      - trading_data:/app/data
      
    networks:
      - trading_network
      
    # Restart policy for robustness
    restart: unless-stopped
    
    # Resource limits to prevent container from consuming too much memory
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '4.0'
        reservations:
          memory: 1G
          cpus: '2.0'
    
    # Health check configuration
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/trade_signal", "-X", "POST", "-H", "Content-Type: application/json", "-d", '{"data":{"Time":"2024-01-01 12:00:00","Price":1.0},"currency":"EUR.USD"}']
      interval: 60s
      timeout: 15s
      start_period: 40m  # Allow 40 minutes for full startup and warmup (35m + buffer)
      retries: 3

  # Example configuration for Instance 2 (Paper trading only)
  # trading_system_instance2:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   container_name: forex_trading_system_instance2
  #   ports:
  #     - "5002:5000"  # Flask server
  #     - "5003:5001"  # IB bot HTTP API
  #   environment:
  #     FLASK_ENV: production
  #     PYTHONUNBUFFERED: 1
  #     PYTHONPATH: /app
  #     
  #     # Instance 2 configuration (paper trading only)
  #     ALGO_INSTANCE: "2"
  #     TRADING_MODE: "paper"
  #     POSITION_SIZE: "100000"  # 100k for paper
  #     
  #     # Database configuration
  #     DB_SERVER: "192.168.50.100"
  #     DB_DATABASE: "FXStrat"
  #     DB_USERNAME: "djaime"
  #     DB_PASSWORD: "Enrique30072000!3"
  #     
  #     # IB configuration (paper trading)
  #     IB_HOST: "host.docker.internal"
  #     IB_PORT: "7497"  # Paper trading port
  #     IB_CLIENT_ID: "6970"  # Different client ID
  #     IB_API_PORT: "5001"
  #     
  #     API_URL: "http://localhost:5000/trade_signal"
  #     ACCEPT_EULA: Y
  #   volumes:
  #     - ./logs:/app/logs
  #     - .:/app
  #     - trading_data:/app/data
  #   networks:
  #     - trading_network
  #   restart: unless-stopped
  #   
  #   # Resource limits to prevent container from consuming too much memory
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 4G
  #         cpus: '4.0'
  #       reservations:
  #         memory: 1G
  #         cpus: '2.0'
  #   
  #   # Health check configuration
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:5000/trade_signal", "-X", "POST", "-H", "Content-Type: application/json", "-d", '{"data":{"Time":"2024-01-01 12:00:00","Price":1.0},"currency":"EUR.USD"}']
  #     interval: 60s
  #     timeout: 15s
  #     start_period: 40m  # Allow 40 minutes for full startup and warmup (35m + buffer)
  #     retries: 3

  # Example configuration for Instance 3 (Paper trading only)
  # trading_system_instance3:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   container_name: forex_trading_system_instance3
  #   ports:
  #     - "5004:5000"  # Flask server
  #     - "5005:5001"  # IB bot HTTP API
  #   environment:
  #     FLASK_ENV: production
  #     PYTHONUNBUFFERED: 1
  #     PYTHONPATH: /app
  #     
  #     # Instance 3 configuration (paper trading only)
  #     ALGO_INSTANCE: "3"
  #     TRADING_MODE: "paper"
  #     POSITION_SIZE: "100000"  # 100k for paper
  #     
  #     # Database configuration
  #     DB_SERVER: "192.168.50.100"
  #     DB_DATABASE: "FXStrat"
  #     DB_USERNAME: "djaime"
  #     DB_PASSWORD: "Enrique30072000!3"
  #     
  #     # IB configuration (paper trading)
  #     IB_HOST: "host.docker.internal"
  #     IB_PORT: "7497"  # Paper trading port
  #     IB_CLIENT_ID: "6971"  # Different client ID
  #     IB_API_PORT: "5001"
  #     
  #     API_URL: "http://localhost:5000/trade_signal"
  #     ACCEPT_EULA: Y
  #   volumes:
  #     - ./logs:/app/logs
  #     - .:/app
  #     - trading_data:/app/data
  #   networks:
  #     - trading_network
  #   restart: unless-stopped
  #   
  #   # Resource limits to prevent container from consuming too much memory
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 4G
  #         cpus: '4.0'
  #       reservations:
  #         memory: 1G
  #         cpus: '2.0'
  #   
  #   # Health check configuration
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:5000/trade_signal", "-X", "POST", "-H", "Content-Type: application/json", "-d", '{"data":{"Time":"2024-01-01 12:00:00","Price":1.0},"currency":"EUR.USD"}']
  #     interval: 60s
  #     timeout: 15s
  #     start_period: 40m  # Allow 40 minutes for full startup and warmup (35m + buffer)
  #     retries: 3


networks:
  trading_network:
    driver: bridge
    name: forex_trading_net

volumes:
  # Persistent storage for logs and data
  trading_data:
    driver: local